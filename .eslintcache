[{"/Users/xindixu/Code/mini-react/src/index.jsx":"1","/Users/xindixu/Code/mini-react/src/App.jsx":"2","/Users/xindixu/Code/mini-react/src/x-react/react.js":"3","/Users/xindixu/Code/mini-react/src/x-react-dom/index.js":"4","/Users/xindixu/Code/mini-react/src/x-react/index.js":"5","/Users/xindixu/Code/mini-react/src/x-react/Component.js":"6","/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js":"7","/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js":"8","/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js":"9","/Users/xindixu/Code/mini-react/src/x-react/hooks.js":"10","/Users/xindixu/Code/mini-react/src/x-react-dom/const.js":"11"},{"size":974,"mtime":1609983922544,"results":"12","hashOfConfig":"13"},{"size":180,"mtime":1609790583288,"results":"14","hashOfConfig":"13"},{"size":0,"mtime":1609789710379,"results":"15","hashOfConfig":"13"},{"size":72,"mtime":1609890650767,"results":"16","hashOfConfig":"13"},{"size":136,"mtime":1609983915771,"results":"17","hashOfConfig":"13"},{"size":111,"mtime":1609800761148,"results":"18","hashOfConfig":"13"},{"size":271,"mtime":1609889721554,"results":"19","hashOfConfig":"13"},{"size":2162,"mtime":1609890364609,"results":"20","hashOfConfig":"13"},{"size":6603,"mtime":1609985552073,"results":"21","hashOfConfig":"13"},{"size":148,"mtime":1609983897239,"results":"22","hashOfConfig":"13"},{"size":216,"mtime":1609984239941,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"55ygkf",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/xindixu/Code/mini-react/src/index.jsx",["51","52"],"import { Component, useState } from \"./x-react\";\nimport ReactDOM from \"./x-react-dom\";\n\nimport \"./index.css\";\n\nconst Frc = ({ name }) => {\n  const [count, setCount] = useState(0);\n  return (\n    <div className=\"border-red\">\n      <h2>functional component</h2>\n      <p>{name}</p>\n      <button type=\"button\" onClick={() => setCount(count + 1)}>\n        Add\n      </button>\n      <p>{count}</p>\n    </div>\n  );\n};\n// eslint-disable-next-line react/prefer-stateless-function\nclass Crc extends Component {\n  render() {\n    return (\n      <div className=\"border-red\">\n        <h2>class component</h2>\n        <p>{this.props.name}</p>\n      </div>\n    );\n  }\n}\n\nconst fragment = (\n  <>\n    <li>hah</li>\n    <li>hah</li>\n  </>\n);\n\nReactDOM.render(\n  <div className=\"border-red\">\n    <h1>React</h1>\n    <p>is pretty cool</p>\n    <Frc name=\"react function component\" />\n    <Crc name=\"react class component\" />\n    <ul>{fragment}</ul>\n  </div>,\n  document.getElementById(\"root\")\n);\n",["53","54","55","56","57"],"/Users/xindixu/Code/mini-react/src/App.jsx",[],["58","59","60","61","62"],"/Users/xindixu/Code/mini-react/src/x-react/react.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/Component.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js",["63"],"/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js",["64","65"],"/* eslint-disable no-bitwise */\nimport { isStringOrNumber, isClass } from \"./utils\";\nimport { Deletion, Placement, Update } from \"./const\";\n\n// Initial render phase\n\n/* \n  ! fiber attributes\n    type\n    key: unique value in the current level\n    props\n    child: first child node\n    sibling: next sibling node\n    return: parent node\n    stateNode: DOM node for host tag, null for function comp, instance for class comp\n    index: current position the current level\n */\n\nlet wipRoot = null; // fiber | null\nlet currentRoot = null; // fiber | null\n// next task that need to update (fiber)\nlet nextUnitOfWork = null; // fiber | null\n\nfunction reconcileChildren(returnFiber, children) {\n  // Filter out text node and process in `updateNodeAttributes`\n  if (isStringOrNumber(children)) {\n    return;\n  }\n\n  const newChildren = Array.isArray(children) ? children : [children];\n\n  // alternate - old fiber,\n  let oldFiber = returnFiber.alternate?.child;\n  let previousNewFiber = null;\n  // Process children in order\n  newChildren.forEach((child, index) => {\n    const same =\n      child &&\n      oldFiber &&\n      child.type === oldFiber.type &&\n      child.key === oldFiber.key;\n\n    let newFiber;\n    if (same) {\n      // Update\n    }\n    if (!same && child) {\n      // Create\n      newFiber = {\n        key: null,\n        type: child.type,\n        props: { ...child.props },\n        child: null, // fiber | null\n        sibling: null, // fiber | null\n        return: returnFiber, // fiber | null\n        stateNode: null, // DOM node for host tags,\n        alternate: null, // last old fiber\n        flags: Placement,\n      };\n    }\n\n    if (!same && oldFiber) {\n      // Delete\n    }\n\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n\n    if (index === 0) {\n      returnFiber.child = newFiber;\n    } else {\n      previousNewFiber.sibling = newFiber;\n    }\n\n    previousNewFiber = newFiber;\n  });\n}\n\n// ============= Updaters =============\nfunction updateNodeAttributes(node, attrs) {\n  Object.keys(attrs)\n    // .filter((k) => k !== \"children\")\n    .forEach((k) => {\n      if (k === \"children\") {\n        // textNode\n        if (isStringOrNumber(attrs[k])) {\n          node.textContent = `${attrs[k]}`;\n        }\n      } else if (k.slice(0, 2) === \"on\") {\n        const eventName = k.slice(2).toLocaleLowerCase();\n        node.addEventListener(eventName, attrs[k]);\n      } else {\n        node[k] = attrs[k];\n      }\n    });\n}\n\nfunction createNode(workInProgress) {\n  const { type, props } = workInProgress;\n  const node = document.createElement(type);\n  updateNodeAttributes(node, props);\n  return node;\n}\n\nfunction updateHostComponent(workInProgress) {\n  const { props } = workInProgress;\n\n  if (!workInProgress.stateNode) {\n    workInProgress.stateNode = createNode(workInProgress);\n  }\n  reconcileChildren(workInProgress, props.children);\n}\n\nfunction updateFunctionComponent(workInProgress) {\n  const { type, props } = workInProgress;\n  const child = type(props);\n  reconcileChildren(workInProgress, child);\n}\n\nfunction updateClassComponent(workInProgress) {\n  const { type, props } = workInProgress;\n  const instance = new type(props);\n  const child = instance.render();\n  reconcileChildren(workInProgress, child);\n}\n\nfunction updateFragmentComponent(workInProgress) {\n  reconcileChildren(workInProgress, workInProgress.props.children);\n}\n\n// ============= Perform =============\nfunction updateFiber(workInProgress) {\n  const { type } = workInProgress;\n\n  if (typeof type === \"string\") {\n    return updateHostComponent(workInProgress);\n  }\n\n  if (typeof type === \"function\") {\n    return isClass(type)\n      ? updateClassComponent(workInProgress)\n      : updateFunctionComponent(workInProgress);\n  }\n\n  return updateFragmentComponent(workInProgress);\n}\n\nfunction performUnitOfWork(workInProgress) {\n  // step 1: update fiber\n  updateFiber(workInProgress);\n\n  // step 2: return next fiber to update\n  // order: first child > sibling > return.sibling (depth-first)\n\n  /*\n      A\n      ├── B\n      │   ├── C\n      │   │   └── D\n      │   └── E\n      └── F\n      │   ├── G\n      │   │   └── H\n      │   └── I\n      │       └── J\n      └── K\n\n\n      Order: A -> B -> C -> D -> E -> F -> G -> H -> I -> J\n      @D: child -> null, sibling -> null, return -> C, C.sibling -> E\n      @E: child -> null, sibling -> null, return -> B, B.sibling -> F\n      @H: child -> null, sibling -> null, return -> G, G.sibling -> I\n      @J: child -> null, sibling -> null, return -> I, I.sibling -> null, I.return -> F, F.sibling -> K\n  */\n\n  if (workInProgress.child) {\n    return workInProgress.child;\n  }\n\n  let nextFiber = workInProgress;\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.return;\n  }\n}\n\n// ============= Commit =============\nfunction commitWorker(workInProgress) {\n  if (!workInProgress) {\n    return;\n  }\n  // step 1: commit itself\n\n  // Find parent's DOM node:\n  // ! Not all fiber has a DOM node, i.e. Provider, Consumer, Fragment, etc.\n  let parentNodeFiber = workInProgress.return;\n  while (!parentNodeFiber.stateNode) {\n    parentNodeFiber = parentNodeFiber.return;\n  }\n  const parentNode = parentNodeFiber.stateNode;\n\n  if (workInProgress.flags & Placement && workInProgress.stateNode) {\n    // Insert\n    parentNode.appendChild(workInProgress.stateNode);\n  } else if (workInProgress.flags & Update && workInProgress.stateNode) {\n    // Update\n  } else if (workInProgress.flags & Deletion && workInProgress.stateNode) {\n    // Delete\n  }\n\n  // step 2: commit child\n  commitWorker(workInProgress.child);\n  // step 3: commit siblings\n  commitWorker(workInProgress.sibling);\n}\n\nfunction commitRoot() {\n  commitWorker(wipRoot.child);\n  currentRoot = wipRoot;\n  wipRoot = null;\n}\n\nfunction workLoop(IdleDeadline) {\n  // idle time left\n  while (nextUnitOfWork && IdleDeadline.timeRemaining() > 1) {\n    // TODO: check priority, check time slot\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n  }\n\n  // Spy on the idle time and run task whenever there's idle time\n  window.requestIdleCallback(workLoop);\n  if (!nextUnitOfWork && wipRoot) {\n    // commit task: update vdom to dom\n    commitRoot();\n  }\n}\n\nwindow.requestIdleCallback(workLoop);\n\n/** create DOM node\n * @param  {} vnode virtual dom node\n * @param  {} container real dom noe\n */\nfunction render(vnode, container) {\n  wipRoot = {\n    type: \"div\",\n    props: { children: { ...vnode } },\n    stateNode: container,\n  };\n\n  nextUnitOfWork = wipRoot;\n}\n\nexport default { render };\n","/Users/xindixu/Code/mini-react/src/x-react/hooks.js",["66"],"export function useState(init) {\n  const state = init;\n  const setState = (action) => {\n    console.log(action);\n  };\n  return [state, setState];\n}\n","/Users/xindixu/Code/mini-react/src/x-react-dom/const.js",[],{"ruleId":"67","severity":2,"message":"68","line":6,"column":16,"nodeType":"69","endLine":6,"endColumn":20},{"ruleId":"67","severity":2,"message":"68","line":25,"column":24,"nodeType":"70","endLine":25,"endColumn":28},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"73","replacedBy":"82"},{"ruleId":"75","replacedBy":"83"},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"86","severity":2,"message":"87","line":48,"column":24,"nodeType":"88","messageId":"89","endLine":48,"endColumn":28},{"ruleId":"86","severity":2,"message":"87","line":123,"column":24,"nodeType":"88","messageId":"89","endLine":123,"endColumn":28},{"ruleId":"90","severity":2,"message":"91","line":222,"column":3,"nodeType":"70","messageId":"92","endLine":222,"endColumn":14},{"ruleId":"93","severity":2,"message":"94","line":4,"column":5,"nodeType":"95","messageId":"96","endLine":4,"endColumn":16},"react/prop-types","'name' is missing in props validation","Property","Identifier","lines-around-directive",["97"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["97"],[],[],[],[],"new-cap","A constructor name should not start with a lowercase letter.","NewExpression","lower","no-unused-vars","'currentRoot' is assigned a value but never used.","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]