[{"/Users/xindixu/Code/mini-react/src/index.jsx":"1","/Users/xindixu/Code/mini-react/src/App.jsx":"2","/Users/xindixu/Code/mini-react/src/x-react/react.js":"3","/Users/xindixu/Code/mini-react/src/x-react-dom/index.js":"4","/Users/xindixu/Code/mini-react/src/x-react/index.js":"5","/Users/xindixu/Code/mini-react/src/x-react/Component.js":"6","/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js":"7","/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js":"8","/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js":"9"},{"size":794,"mtime":1609892940850,"results":"10","hashOfConfig":"11"},{"size":180,"mtime":1609790583288,"results":"12","hashOfConfig":"11"},{"size":0,"mtime":1609789710379,"results":"13","hashOfConfig":"11"},{"size":72,"mtime":1609890650767,"results":"14","hashOfConfig":"11"},{"size":111,"mtime":1609892429270,"results":"15","hashOfConfig":"11"},{"size":111,"mtime":1609800761148,"results":"16","hashOfConfig":"11"},{"size":271,"mtime":1609889721554,"results":"17","hashOfConfig":"11"},{"size":2162,"mtime":1609890364609,"results":"18","hashOfConfig":"11"},{"size":5452,"mtime":1609892875920,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"55ygkf",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},"/Users/xindixu/Code/mini-react/src/index.jsx",["40","41","42"],"/Users/xindixu/Code/mini-react/src/App.jsx",[],["43","44","45","46","47"],"/Users/xindixu/Code/mini-react/src/x-react/react.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/Component.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js",["48"],"/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js",["49","50"],"import { isStringOrNumber, isClass } from \"./utils\";\n\n// Initial render phase\n\n/* \n  ! fiber attributes\n    type\n    key: unique value in the current level\n    props\n    child: first child node\n    sibling: next sibling node\n    return: parent node\n    stateNode: DOM node for host tag, null for function comp, instance for class comp\n    index: current position the current level\n */\n\nlet wipRoot = null; // fiber | null\n// next task that need to update (fiber)\nlet nextUnitOfWork = null; // fiber | null\n\nfunction reconcileChildren(workInProgress, children) {\n  // Filter out text node and process in `updateNodeAttributes`\n  if (isStringOrNumber(children)) {\n    return;\n  }\n\n  const newChildren = Array.isArray(children) ? children : [children];\n\n  console.log(newChildren);\n  let previousNewFiber = null;\n  // Process children in order\n  newChildren.forEach((child, index) => {\n    // Create fiber\n    const newFiber = {\n      type: child.type,\n      props: { ...child.props },\n      child: null, // fiber | null\n      sibling: null, // fiber | null\n      return: workInProgress, // fiber | null\n      stateNode: null, // DOM node for host tags\n    };\n\n    if (index === 0) {\n      workInProgress.child = newFiber;\n    } else {\n      previousNewFiber.sibling = newFiber;\n    }\n\n    previousNewFiber = newFiber;\n  });\n}\n\n// ============= Updaters =============\nfunction updateNodeAttributes(node, attrs) {\n  Object.keys(attrs)\n    // .filter((k) => k !== \"children\")\n    .forEach((k) => {\n      if (k === \"children\") {\n        // textNode\n        if (isStringOrNumber(attrs[k])) {\n          node.textContent = `${attrs[k]}`;\n        }\n      } else {\n        node[k] = attrs[k];\n      }\n    });\n}\n\nfunction createNode(workInProgress) {\n  const { type, props } = workInProgress;\n  const node = document.createElement(type);\n  updateNodeAttributes(node, props);\n  return node;\n}\n\nfunction updateHostComponent(workInProgress) {\n  const { props } = workInProgress;\n\n  if (!workInProgress.stateNode) {\n    workInProgress.stateNode = createNode(workInProgress);\n  }\n  reconcileChildren(workInProgress, props.children);\n}\n\nfunction updateFunctionComponent(workInProgress) {\n  const { type, props } = workInProgress;\n  const child = type(props);\n  reconcileChildren(workInProgress, child);\n}\n\nfunction updateClassComponent(workInProgress) {}\n\nfunction updateFragmentComponent(workInProgress) {\n  reconcileChildren(workInProgress, workInProgress.props.children);\n}\n\n// ============= Perform =============\nfunction updateFiber(workInProgress) {\n  const { type } = workInProgress;\n\n  if (typeof type === \"string\") {\n    return updateHostComponent(workInProgress);\n  }\n\n  if (typeof type === \"function\") {\n    return isClass(type)\n      ? updateClassComponent(workInProgress)\n      : updateFunctionComponent(workInProgress);\n  }\n\n  return updateFragmentComponent(workInProgress);\n}\n\nfunction performUnitOfWork(workInProgress) {\n  // step 1: update fiber\n  updateFiber(workInProgress);\n\n  // step 2: return next fiber to update\n  // order: first child > sibling > return.sibling (depth-first)\n\n  /*\n      A\n      ├── B\n      │   ├── C\n      │   │   └── D\n      │   └── E\n      └── F\n      │   ├── G\n      │   │   └── H\n      │   └── I\n      │       └── J\n      └── K\n\n\n      Order: A -> B -> C -> D -> E -> F -> G -> H -> I -> J\n      @D: child -> null, sibling -> null, return -> C, C.sibling -> E\n      @E: child -> null, sibling -> null, return -> B, B.sibling -> F\n      @H: child -> null, sibling -> null, return -> G, G.sibling -> I\n      @J: child -> null, sibling -> null, return -> I, I.sibling -> null, I.return -> F, F.sibling -> K\n  */\n\n  if (workInProgress.child) {\n    return workInProgress.child;\n  }\n\n  let nextFiber = workInProgress;\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.return;\n  }\n}\n\n// ============= Commit =============\nfunction commitWorker(workInProgress) {\n  if (!workInProgress) {\n    return;\n  }\n  // step 1: commit itself\n\n  // Find parent's DOM node:\n  // Not all fiber has a DOM node, i.e. Provider, Consumer, Fragment, etc.\n  let parentNodeFiber = workInProgress.return;\n  while (!parentNodeFiber.stateNode) {\n    parentNodeFiber = parentNodeFiber.return;\n  }\n  const parentNode = parentNodeFiber.stateNode;\n\n  if (workInProgress.stateNode) {\n    parentNode.appendChild(workInProgress.stateNode);\n  }\n\n  // step 2: commit child\n  commitWorker(workInProgress.child);\n  // step 3: commit siblings\n  commitWorker(workInProgress.sibling);\n}\n\nfunction commitRoot() {\n  commitWorker(wipRoot.child);\n  wipRoot = null;\n}\n\nfunction workLoop(IdleDeadline) {\n  // idle time left\n  while (nextUnitOfWork && IdleDeadline.timeRemaining() > 1) {\n    // TODO: check priority, check time slot\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n  }\n\n  // Spy on the idle time and run task whenever there's idle time\n  window.requestIdleCallback(workLoop);\n  if (!nextUnitOfWork && wipRoot) {\n    // commit task: update vdom to dom\n    commitRoot();\n  }\n}\n\nwindow.requestIdleCallback(workLoop);\n\n/** create DOM node\n * @param  {} vnode virtual dom node\n * @param  {} container real dom noe\n */\nfunction render(vnode, container) {\n  wipRoot = {\n    type: \"div\",\n    props: { children: { ...vnode } },\n    stateNode: container,\n  };\n\n  nextUnitOfWork = wipRoot;\n}\n\nexport default { render };\n",{"ruleId":"51","severity":2,"message":"52","line":6,"column":16,"nodeType":"53","endLine":6,"endColumn":20},{"ruleId":"54","severity":2,"message":"55","line":14,"column":7,"nodeType":"56","messageId":"57","endLine":14,"endColumn":10},{"ruleId":"51","severity":2,"message":"52","line":19,"column":24,"nodeType":"56","endLine":19,"endColumn":28},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":2,"message":"69","line":48,"column":24,"nodeType":"70","messageId":"71","endLine":48,"endColumn":28},{"ruleId":"72","severity":2,"message":"73","line":29,"column":3,"nodeType":"74","messageId":"75","endLine":29,"endColumn":14},{"ruleId":"54","severity":2,"message":"76","line":91,"column":31,"nodeType":"56","messageId":"57","endLine":91,"endColumn":45},"react/prop-types","'name' is missing in props validation","Property","no-unused-vars","'Crc' is defined but never used.","Identifier","unusedVar","lines-around-directive",["77"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"new-cap","A constructor name should not start with a lowercase letter.","NewExpression","lower","no-console","Unexpected console statement.","MemberExpression","unexpected","'workInProgress' is defined but never used.","padding-line-between-statements"]