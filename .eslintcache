[{"/Users/xindixu/Code/mini-react/src/index.jsx":"1","/Users/xindixu/Code/mini-react/src/App.jsx":"2","/Users/xindixu/Code/mini-react/src/x-react/react.js":"3","/Users/xindixu/Code/mini-react/src/x-react-dom/index.js":"4","/Users/xindixu/Code/mini-react/src/x-react/index.js":"5","/Users/xindixu/Code/mini-react/src/x-react/Component.js":"6","/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js":"7","/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js":"8","/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js":"9","/Users/xindixu/Code/mini-react/src/x-react/hooks.js":"10","/Users/xindixu/Code/mini-react/src/x-react-dom/const.js":"11"},{"size":975,"mtime":1609989425965,"results":"12","hashOfConfig":"13"},{"size":180,"mtime":1609790583288,"results":"14","hashOfConfig":"13"},{"size":0,"mtime":1609789710379,"results":"15","hashOfConfig":"13"},{"size":72,"mtime":1609989322893,"results":"16","hashOfConfig":"13"},{"size":136,"mtime":1609983915771,"results":"17","hashOfConfig":"13"},{"size":111,"mtime":1609800761148,"results":"18","hashOfConfig":"13"},{"size":271,"mtime":1609889721554,"results":"19","hashOfConfig":"13"},{"size":2162,"mtime":1609890364609,"results":"20","hashOfConfig":"13"},{"size":7269,"mtime":1609989387928,"results":"21","hashOfConfig":"13"},{"size":703,"mtime":1609989390966,"results":"22","hashOfConfig":"13"},{"size":216,"mtime":1609984239941,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"55ygkf",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"/Users/xindixu/Code/mini-react/src/index.jsx",["49","50"],"/Users/xindixu/Code/mini-react/src/App.jsx",[],["51","52","53","54","55"],"/Users/xindixu/Code/mini-react/src/x-react/react.js",[],["56","57","58","59","60"],"/Users/xindixu/Code/mini-react/src/x-react-dom/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/index.js",[],"/Users/xindixu/Code/mini-react/src/x-react/Component.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/utils.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/vdom.js",["61"],"/Users/xindixu/Code/mini-react/src/x-react-dom/fiber.js",["62"],"/* eslint-disable no-bitwise */\nimport { isStringOrNumber, isClass } from \"./utils\";\nimport { Deletion, Placement, Update } from \"./const\";\n\n// Initial render phase\n\n/* \n  ! fiber attributes\n    type\n    key: unique value in the current level\n    props\n    child: first child node\n    sibling: next sibling node\n    return: parent node\n    stateNode: DOM node for host tag, null for function comp, instance for class comp\n    index: current position the current level\n */\n\nconst w = window;\n// `render` will initiate first task\nw.nextUnitOfWork = null;\nw.wipRoot = null; // fiber | null\n// root that got interrupted\nw.currentRoot = null; // fiber | null\n// functional components related\nw.wipFiber = null;\nw.hookIndex = null;\n\nw.deletions = null;\n\nfunction reconcileChildren(returnFiber, children) {\n  // Filter out text node and process in `updateNode`\n  if (isStringOrNumber(children)) {\n    return;\n  }\n\n  const newChildren = Array.isArray(children) ? children : [children];\n\n  // alternate - old fiber,\n  let oldFiber = returnFiber.alternate?.child;\n  let previousNewFiber = null;\n  // Process children in order\n  newChildren.forEach((child, index) => {\n    const same = child && oldFiber && child.type === oldFiber.type;\n    // child.key === oldFiber.key;\n\n    let newFiber = null;\n    if (same) {\n      // Update\n      newFiber = {\n        key: child.key || null,\n        type: child.type,\n        props: { ...child.props },\n        child: null, // fiber | null\n        sibling: null, // fiber | null\n        return: returnFiber, // fiber | null\n        stateNode: oldFiber.stateNode, // DOM node for host tags,\n        alternate: oldFiber, // last old fiber\n        flags: Update,\n      };\n    }\n    if (!same && child) {\n      // Create\n      newFiber = {\n        key: child.key || null,\n        type: child.type,\n        props: { ...child.props },\n        child: null, // fiber | null\n        sibling: null, // fiber | null\n        return: returnFiber, // fiber | null\n        stateNode: null, // DOM node for host tags,\n        alternate: null, // last old fiber\n        flags: Placement,\n      };\n    }\n\n    if (!same && oldFiber) {\n      // Delete\n    }\n\n    if (oldFiber) {\n      oldFiber = oldFiber.sibling;\n    }\n\n    // Create fiber structure\n    if (index === 0) {\n      returnFiber.child = newFiber;\n    } else {\n      previousNewFiber.sibling = newFiber;\n    }\n\n    previousNewFiber = newFiber;\n  });\n}\n\n// ============= Updaters =============\nfunction updateNode(node, attrs) {\n  Object.keys(attrs)\n    // .filter((k) => k !== \"children\")\n    .forEach((k) => {\n      if (k === \"children\") {\n        // textNode\n        if (isStringOrNumber(attrs[k])) {\n          node.textContent = `${attrs[k]}`;\n        }\n      } else if (k.slice(0, 2) === \"on\") {\n        const eventName = k.slice(2).toLocaleLowerCase();\n        node.addEventListener(eventName, attrs[k]);\n      } else {\n        node[k] = attrs[k];\n      }\n    });\n}\n\nfunction createNode(workInProgress) {\n  const { type, props } = workInProgress;\n  const node = document.createElement(type);\n  updateNode(node, props);\n  return node;\n}\n\nfunction updateHostComponent(workInProgress) {\n  const { props } = workInProgress;\n\n  if (!workInProgress.stateNode) {\n    workInProgress.stateNode = createNode(workInProgress);\n  }\n  reconcileChildren(workInProgress, props.children);\n}\n\nfunction updateFunctionComponent(workInProgress) {\n  w.wipFiber = workInProgress;\n  w.wipFiber.hooks = [];\n  w.wipFiber.hookIndex = 0;\n\n  const { type, props } = workInProgress;\n  const child = type(props);\n  reconcileChildren(workInProgress, child);\n}\n\nfunction updateClassComponent(workInProgress) {\n  const { type, props } = workInProgress;\n  const instance = new type(props);\n  const child = instance.render();\n  reconcileChildren(workInProgress, child);\n}\n\nfunction updateFragmentComponent(workInProgress) {\n  reconcileChildren(workInProgress, workInProgress.props.children);\n}\n\n// ============= Perform =============\nfunction updateFiber(workInProgress) {\n  const { type } = workInProgress;\n\n  if (typeof type === \"string\") {\n    return updateHostComponent(workInProgress);\n  }\n\n  if (typeof type === \"function\") {\n    return isClass(type)\n      ? updateClassComponent(workInProgress)\n      : updateFunctionComponent(workInProgress);\n  }\n\n  return updateFragmentComponent(workInProgress);\n}\n\nfunction performUnitOfWork(workInProgress) {\n  // step 1: update fiber\n  updateFiber(workInProgress);\n\n  // step 2: return next fiber to update\n  // order: first child > sibling > return.sibling (depth-first)\n\n  /*\n      A\n      ├── B\n      │   ├── C\n      │   │   └── D\n      │   └── E\n      └── F\n      │   ├── G\n      │   │   └── H\n      │   └── I\n      │       └── J\n      └── K\n\n\n      Order: A -> B -> C -> D -> E -> F -> G -> H -> I -> J\n      @D: child -> null, sibling -> null, return -> C, C.sibling -> E\n      @E: child -> null, sibling -> null, return -> B, B.sibling -> F\n      @H: child -> null, sibling -> null, return -> G, G.sibling -> I\n      @J: child -> null, sibling -> null, return -> I, I.sibling -> null, I.return -> F, F.sibling -> K\n  */\n\n  if (workInProgress.child) {\n    return workInProgress.child;\n  }\n\n  let nextFiber = workInProgress;\n  while (nextFiber) {\n    if (nextFiber.sibling) {\n      return nextFiber.sibling;\n    }\n    nextFiber = nextFiber.return;\n  }\n}\n\n// ============= Commit =============\nfunction commitWorker(workInProgress) {\n  if (!workInProgress) {\n    return;\n  }\n  // step 1: commit itself\n\n  // Find parent's DOM node:\n  // ! Not all fiber has a DOM node, i.e. Provider, Consumer, Fragment, etc.\n  let parentNodeFiber = workInProgress.return;\n  while (!parentNodeFiber.stateNode) {\n    parentNodeFiber = parentNodeFiber.return;\n  }\n  const parentNode = parentNodeFiber.stateNode;\n\n  if (workInProgress.flags & Placement && workInProgress.stateNode) {\n    // Insert\n    parentNode.appendChild(workInProgress.stateNode);\n  } else if (workInProgress.flags & Update && workInProgress.stateNode) {\n    // Update\n    updateNode(workInProgress.stateNode, workInProgress.props);\n  } else if (workInProgress.flags & Deletion && workInProgress.stateNode) {\n    // Delete\n  }\n\n  // step 2: commit child\n  commitWorker(workInProgress.child);\n  // step 3: commit siblings\n  commitWorker(workInProgress.sibling);\n}\n\nfunction commitRoot() {\n  commitWorker(w.wipRoot.child);\n  w.currentRoot = w.wipRoot;\n  w.wipRoot = null;\n}\n\nfunction workLoop(IdleDeadline) {\n  // idle time left\n  while (w.nextUnitOfWork && IdleDeadline.timeRemaining() > 1) {\n    // TODO: check priority, check time slot\n    w.nextUnitOfWork = performUnitOfWork(w.nextUnitOfWork);\n  }\n\n  // Spy on the idle time and run task whenever there's idle time\n  if (!w.nextUnitOfWork && w.wipRoot) {\n    // commit task: update vdom to dom\n    commitRoot();\n  }\n  window.requestIdleCallback(workLoop);\n}\n\nwindow.requestIdleCallback(workLoop);\n\n/** create DOM node\n * @param  {} vnode virtual dom node\n * @param  {} container real dom noe\n */\nfunction render(vnode, container) {\n  w.wipRoot = {\n    type: \"div\",\n    props: { children: { ...vnode } },\n    stateNode: container,\n  };\n\n  w.nextUnitOfWork = w.wipRoot;\n}\n\nexport default { render };\n","/Users/xindixu/Code/mini-react/src/x-react/hooks.js",[],"/Users/xindixu/Code/mini-react/src/x-react-dom/const.js",[],{"ruleId":"63","severity":2,"message":"64","line":6,"column":16,"nodeType":"65","endLine":6,"endColumn":20},{"ruleId":"63","severity":2,"message":"64","line":25,"column":24,"nodeType":"66","endLine":25,"endColumn":28},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"67","replacedBy":"77"},{"ruleId":"69","replacedBy":"78"},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"75","replacedBy":"81"},{"ruleId":"82","severity":2,"message":"83","line":48,"column":24,"nodeType":"84","messageId":"85","endLine":48,"endColumn":28},{"ruleId":"82","severity":2,"message":"83","line":143,"column":24,"nodeType":"84","messageId":"85","endLine":143,"endColumn":28},"react/prop-types","'name' is missing in props validation","Property","Identifier","lines-around-directive",["86"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["86"],[],[],[],[],"new-cap","A constructor name should not start with a lowercase letter.","NewExpression","lower","padding-line-between-statements"]